name: build-ublue
on:
  pull_request:
    branches:
      - main
  #schedule:
  #  - cron: '45 9 * * *' # 9:45am UTC everyday (45 minutes after ublue-os/nvidia builds)
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build_info:
    name: Get Build Info
    runs-on: ubuntu-latest
    outputs:
      pr_prefix: ${{ steps.pr_prefix.outputs.pr_prefix }}
    steps:
      - name: Set PR Prefix
        id: pr_prefix
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_PREFIX="pr-${{ github.event.number }}-"
          else
              PR_PREFIX=""
          fi
          echo "pr_prefix=${PR_PREFIX}" >> $GITHUB_OUTPUT

  build_akmods:
    name: Build base akmods
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name: [base]
        image_suffix: [main]
        major_version: [37, 38]
        include:
          - major_version: 37
            is_latest_version: true
            is_stable_version: true
          - major_version: 38
            is_latest_version: true
            is_stable_version: false
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.major_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Retrieve akmods signing key
        run: |
          mkdir -p build/certs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Using test signing key"
          else
              echo "${{ secrets.AKMOD_PRIVKEY }}" > build/certs/private_key.priv
              find build/
          fi

      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/${{ matrix.image_name }}-${{ matrix.image_suffix }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ format('{0}-kmods', matrix.image_name) }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/bsherman/ublue-kmods/main/README.md
            org.opencontainers.image.description=Scratch image with extra driver RPMs
            org.opencontainers.image.title=${{ format('{0}-kmods', matrix.image_name) }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./build/Containerfile
          context: ./build
          image: ${{ format('{0}-kmods', matrix.image_name) }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ matrix.image_name }}
            IMAGE_SUFFIX=${{ matrix.image_suffix }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        #if: github.event_name != 'pull_request'
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        #if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  trigger_downstream:
    name: Trigger downstream ublue-custom
    runs-on: ubuntu-latest
    needs: build_akmods
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        name: Build ublue-custom
        if: github.event_name != 'pull_request'
        with:
          owner: bsherman
          repo: ublue-custom
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          workflow_file_name: build.yml
          propagate_failure: false
          wait_workflow: false

